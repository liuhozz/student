package cn.itcast.erp.biz.impl;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;

import com.alibaba.fastjson.JSON;

import cn.itcast.erp.biz.IReturnordersBiz;
import cn.itcast.erp.dao.IEmpDao;
import cn.itcast.erp.dao.IReturnordersDao;
import cn.itcast.erp.dao.ISupplierDao;
import cn.itcast.erp.entity.Returnorderdetail;
import cn.itcast.erp.entity.Returnorders;
import cn.itcast.erp.exception.ErpException;
/**
 * 退货订单业务逻辑类
 * @author Administrator
 *
 */
public class ReturnordersBiz extends BaseBiz<Returnorders> implements IReturnordersBiz {


	private IReturnordersDao returnordersDao;
	private IEmpDao empDao;
	private ISupplierDao supplierDao;
	public void setEmpDao(IEmpDao empDao) {
		this.empDao = empDao;
	}
	public ISupplierDao getSupplierDao() {
		return supplierDao;
	}
	public void setSupplierDao(ISupplierDao supplierDao) {
		this.supplierDao = supplierDao;
	}
	
	public void setReturnordersDao(IReturnordersDao returnordersDao) {
		this.returnordersDao = returnordersDao;
		super.setBaseDao(this.returnordersDao);
	}
	//增加退货订单
	public void addReturn(Returnorders returnorders){
		Subject subject = SecurityUtils.getSubject();
		//采购订单退货登记
		if(Returnorders.TYPE_IN.equals(returnorders.getType())){
			//代码级别的权限控制
			//判断当前登陆的用户是否有 采购订单申请 的权限
			if(!subject.isPermitted("采购退货订单登记")){
				throw new ErpException("权限不足");
			}
		}else if(Returnorders.TYPE_OUT.equals(returnorders.getType())){
			if(!subject.isPermitted("销售退货订单登记")){
				throw new ErpException("权限不足");
			}
		}else{
			throw new ErpException("非法参数");
		}
		
		//1. 设置退货订单的状态
		returnorders.setState(Returnorders.STATE_CREATE);
		//2. 退货订单的类型
		//orders.setType(Returnorders.TYPE_IN);
		//3. 退单时间
		returnorders.setCreatetime(new Date());
		
		// 合计金额
		double total = 0;
		
		for(Returnorderdetail returndetail : returnorders.getReturnorderdetail()){
			//累计金额
			total += returndetail.getMoney();
			//明细的状态
			returndetail.setState(Returnorderdetail.STATE_NOT_IN);
			//跟订单的关系
			returndetail.setReturnorders(returnorders);
		}
		//设置订单总金额
		returnorders.setTotalmoney(total);
		
		//保存到DB
		returnordersDao.add(returnorders);
	}
	
	public List<Returnorders> getListByPage(Returnorders t1,Returnorders t2,Object param,int firstResult, int maxResults){
		//获取分页后的订单列表
		List<Returnorders> ordersList =  super.getListByPage(t1, t2, param, firstResult, maxResults);
		//缓存员工编号与员工的名称, key=员工的编号，value=员工的名称
		Map<Long, String> empNameMap = new HashMap<Long, String>();
		//缓存供应商编号与员工的名称, key=供应商的编号，value=供应商的名称
		Map<Long, String> supplierNameMap = new HashMap<Long, String>();
		//循环，获取员工的名称
		for(Returnorders o : ordersList){
			//从缓存中取出员工名称
			o.setCreaterName(getEmpName(o.getCreater(),empNameMap,empDao));
			o.setCheckerName(getEmpName(o.getChecker(),empNameMap,empDao));
			o.setEnderName(getEmpName(o.getEnder(),empNameMap,empDao));
			
			//供应商
			o.setSupplierName(getSupplierName(o.getSupplieruuid(),supplierNameMap));
		}
		return ordersList;
	}
	
	/**
	 * 获取供应商名称
	 * @param uuid 供应商编号
	 * @param supplierNameMap 缓存供应商编号与供应商的名称 
	 * @return 返回供应商名称
	 */
	private String getSupplierName(Long uuid, Map<Long, String> supplierNameMap){
		if(null == uuid){
			return null;
		}
		String supplierName = supplierNameMap.get(uuid);
		if(null == supplierName){
			//如果没有找供应商的名称，则进行数据库查询
			supplierName = supplierDao.get(uuid).getName();
			//存入缓存中
			supplierNameMap.put(uuid, supplierName);
		}
		return supplierName;
	}
	
	/**
	 * 退货订单审核
	 */
	public void returnOrdersCheck(Long uuid, Long empUuid) {

		//获取订单，进入持久化状态
		Returnorders orders = returnordersDao.get(uuid);
		//订单的状态
		if(!Returnorders.STATE_CREATE.equals(orders.getState())){
			throw new ErpException("亲！该订单已经审核过了");
		}
		//1. 修改订单的状态
		orders.setState(Returnorders.STATE_CHECK);
		//2. 审核的时间
		orders.setChecktime(new Date());
		//3. 审核人
		orders.setChecker(empUuid);
	}
}

	
	

