1.集合体系
	1.引用类型数组:
		数据类型[] 数组名 = new 数据类型[长度];

		一个类就是一个类型


	2.集合的由来:
		1.集合与数组的区别:
			1.存储的数据类型
				数组可以存储基本数据类型,也可以存储引用数据类型
				集合只能存储引用数据类型

			2.长度
				数组的长度是固定的
				集合的长度是可变的!

		2.什么时候使用哪个?
			当存储的元素是固定个数的时候使用数组
			当存储的元素个数不确定时使用集合!


		3.集合体系:
			Collection:接口
				|--List:(接口): 有序, 有索引, 可以存储重复元素
					|--ArrayList
					|--LinkedList
					|--Vector
				|--Set(接口): 无序,无索引, 不可以存储重复元素
					|--HashSet
					|--TreeSet

			有序:
				存进去的顺序和取出来的顺序一致

		
		4.集合中的常用方法:
			boolean add(Object obj): 把元素存储到集合中, 返回是否存储成功.  List集合中只会返回true  Set如果是重复的就返回False
			void remove(Object): 把集合中的指定元素删除
			void clear(): 清空集合
			boolean contains(Object): 判断集合中是否包含指定的元素
			boolean isEmpty(): 判断集合是否为空
			int size(): 获取集合的长度

		5.集合转成数组:
			<T> T[] toArray(): 把集合转成Object数组
				注意: 这个方法里面创建的就是Object数组, 不可以强转成其他类型的数组!

		6.Collection中带All的方法:
			addAll(Collection): c1.addAll(c2):把c2集合中的所有元素存储到c1集合中
			removeAll(Collection): c1.removeAll(c2): 把c1集合中与c2集合相同的元素删除
			containsAll(Collection): c1.containsAll(c2): 判断c1集合中是否包含c2集合中的所有元素
			retainAll(Collection): c1.retainAll(c2): 取两个集合的交集内容(了解)

		7.集合的第二种遍历方式: 迭代器
				//获取迭代器对象:
				Iterator it = 集合对象.iterator();

				判断集合中是否有元素:
				it.hasNext()

				//获取元素
				Object obj = it.next();

		8.List集合的特有方法:
			add(index,Object):把元素添加到指定的位置
			remove(index): 根据索引删除元素
			get(index): 根据索引获取元素
			set(index,value): 把指定位置的元素修改成value

		9.并发修改异常:
			1.发生的原因:
				在使用迭代器进行遍历集合,然后使用集合来增删元素!

			2.解决方案:
				使用List集合特有的迭代器进行遍历, 然后使用这个迭代器的方法来进行增删元素.

		10.List集合的特有迭代器: ListIterator
			add(Object): 添加元素
			remove():删除遍历到的元素
			hasNext(): 是否有下一个元素
			next(): 获取下一个元素
			hasPrevious(): 是否有上一个元素
			previous(): 获取上一个元素

			除了可以正向遍历,还可以反向遍历(做反向遍历前需要先做正向遍历)
			
		11.数据结构:	
			1.数组结构:
				查找修改快,增删慢

			2.链表结构:	
				增删快,查找修改慢
		
		12.List的三个子类:
			ArrayList:
				底层是数组结构,查找修改快,增删慢. 线程不安全,效率高

			LinkedList:
				底层是链表结构,增删快,查找修改慢, 线程不安全,效率高

			Vector:
				底层是数组结构,查询增删都很慢!线程是安全的,效率低!

			什么时候使用哪个集合?
				查询修改多,用ArrayList
				增删多, 使用LinkedList

				如果都很多,用ArrayList

