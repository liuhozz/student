1.多态: 多种形态
	1.多态的前提:
		1.继承
		2.要有方法重写(不是必须条件,但是没有方法重写的多态是没有意义的!)
		3.要有父类引用指向子类的对象

	2.多态访问成员变量的特点:
		编译看左边(父类),运行也是看左边;

	3.多态访问非静态成员方法的特点:
		编译看左边(父类),运行看右边(子类)

	4.多态访问静态成员方法的特点:
		编译看左边(父类),运行看左边(父类)

	5.多态中访问成员的特点(记住这个即可!)
		只有非静态方法是编译看左边,运行看右边的.
		其他成员都是编译和运行都是看左边的!

	6.向上转型和向下转型:
		向上转型: 父类引用指向子类对象
			 Fu f=new Zi();

		向下转型: 把向上转型的引用再强制转换成子类类型
			Zi z = (Zi)f;

	7.多态的好处和弊端:
		好处:
			1.提高代码的维护性(继承)
			2.提高代码的扩展性(多态)

		弊端:
			不能使用子类特有的属性和行为
	


2.抽象
	1.使用abstract关键字修饰的类就是抽象类

	2.抽象类的特点:	
		1.抽象类必须使用abstract关键字修饰
		2.抽象类中可以有抽象方法,也可以没有
		3.抽象类是不能创建对象
		4.抽象类的子类: 要么是抽象类,要么重写父类中的所有抽象方法

	3.抽象方法:
		被abstract关键字修饰,并且没有方法体的方法!

	
	4.抽象类的成员:
		成员变量: 可以是变量,也可以是常量
		成员方法: 可以是抽象方法,也可以是普通方法
		构造方法: 有构造方法, 给子类初始化用!

		总结: 抽象类跟普通类的区别,就是抽象类比普通类多了一个抽象方法!

	
	5.抽象类的作用:
		1.强制让子类一定要重写某个方法
		2.不让别人创建对象

	6.abstract关键字不能与什么关键字共存:	
		static:	静态修饰的内容可以通过类名调用.abstract修饰的方法没有方法体的,调用了也没有意义.
		final: final修饰的方法不能被重写,abstract修饰的方法要求子类必须重写
		private:prvate修饰的方法不能被继承,abstract修饰的方法必须要被子类重写!


3.接口
	1.接口就是规则

	2.接口的特点:
		1.定义接口用: interface
		2.实现接口用: implements
		3.接口不可以创建对象
		4.接口的子类: 要么是抽象类,要么重写所有的抽象方法

	3.接口中的成员:
		成员变量: 只有常量,没有变量,因为接口中的成员变量都有默认的修饰符: public static final
		成员方法: 只有抽象方法, 因为接口中的成员方法有默认修饰符: public abstract
		构造方法: 没有构造方法

	4.类与类,类与接口的关系:
		类与类:继承关系,只能单继承,不能多继承,不过可以多层继承
		类与接口: 实现关系,可以单实现,也可以多实现
		接口与接口: 继承关系,可以单继承,也可以多继承!


	5.抽象类与接口的区别:	
		1.成员的区别:
			抽象类:普通类有的内容它都可以有,还可以有抽象方法
			接口: 只能有常量 和 抽象方法

		2.关系的区别:
			抽象类与类是继承关系
			接口与类是实现关系

		3.设计理念的区别:
			抽象类体现的是: is a 关系,什么是什么的一种
			接口体现的是: like a 关系