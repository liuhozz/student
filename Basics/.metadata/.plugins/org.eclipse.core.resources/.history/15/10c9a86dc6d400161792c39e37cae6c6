1.ArrayList集合去除重复元素
	结论:
		ArrayList集合中的contains和remove方法底层是依赖存储的对象中的equals方法, 如果需要用到集合的判断和删除方法
		那么存储的对象就一定要重写equals方法!

2.LinkedList集合
	addFirst(Object)
	addLast(Object)
	removeFirst()
	removeLast()
	getFirst()
	getLast()

3.数据结构:	
	1.栈:
		先进后出
		
	2.队列结构:
		先进先出

4.泛型:
	1.泛型的好处:
		1.提高安全性(把运行时期的错误提前到编译时期)
		2.省去强转的麻烦

	2.注意事项:
		1.前后的泛型必须一致
		2.不要把泛型定义成Object,没有意义
		3.JDK1.7的时候,后面的泛型可以写成<> , 菱形泛型

-----------------------------以下为了解的内容----------------------------
	3.泛型类:(了解)
		在定义类的时候, 在类名后面加上泛型!

	4.泛型方法:(了解)
		非静态方法:
			可以使用类上声明的泛型,也可以自己声明一个泛型
		
		静态方法:
			必须自己声明一个泛型,不能使用类上定义的泛型

	5.泛型接口
		在定义接口的时候声明一个泛型
			1.在子类实现接口时可以指定接口的泛型
			2.在子类创建对象时可以指定接口的泛型

	6.泛型通配符:
		? : 任意类型的泛型
		? extends E : 向下限定, 只能是E或者它的子类
		? super E : 向上限定, 只能是E或者它的父类

---------------------------------------------------------------------------

	JDK1.5新特性:
		
	1.增强for
		格式:
			for(数据类型 变量名:数组或者集合){
				
			}

		作用: 只能用来遍历数组或者集合

		好处: 简化遍历的操作

		底层: 是由迭代器实现

	2.三种遍历的方式:
		1.普通for循环遍历:	
			可以在遍历的时候删除元素,删除的时候要减减

		2.迭代器遍历:
			可以在遍历的时候删除

		3.增强for遍历:
			不可以在遍历的时候删除

	3.静态导入(了解)
		格式:
			import static 包名.类名.方法名;

	4.可变参数
		定义在方法的参数列表上的.

		本质: 是一个数组

		当一个方法的参数有多个时,可变参数必须是最后一个!

	5.Arrays工具类的asList()方法
		asList(): 可以把一个数组转换成集合,如果是基本数据类型的数组,转换成的集合,该数组只是集合中的一个对象!
					如果是引用数据类型的数组, 数组中的元素就是集合的元素

		
		集合转换数组的方法:
			toArray(): 把集合转成Object数组
			toArray(T[]): 把集合转换成指定类型的数组

			在转换成数组的时候,必须传入一个数组对象, 给的是什么类型的数组,转换的就是什么数组
			指定的数组长度如果小于等于集合的长度,转换的数组长度就是集合的长度
			如果指定的数组长度大于集合的长度,返回的数组长度为指定的长度

	6.集合的嵌套(了解)