1.异常
	1.异常体系:
		Throwable
			|--Error: 错误
			|--Exception: 异常
				|--RuntimeException: 运行时异常
				|--其他异常: 编译时异常

	2.JVM默认的异常处理方式:
		在控制台转出异常的名字和发生异常的位置. 把程序停止!

	3.处理异常的方式:

		1.一次处理一个异常:

			try{
				正常的代码,这些代码可能会发生异常!
			}catch(异常的类型 变量名){
				当发生异常的时候,对异常的处理.
			}

		2.一次处理多个异常:
			try{
				正常的代码,这些代码可能会发生异常!
			}catch(异常类型1 变量名){
				针对异常类型1的处理方式
			}catch(异常类型2 变量名){
				针对异常类型2的处理方式
			}...

	4.编译时异常和运行时异常的区别:
		编译时异常: 必须要做处理,要么抛出去,要么try catch捕捉异常
		运行时异常: 可以不做处理,也可以像编译时异常一样处理

	5.Throwable中的常用方法:
		getMessage(): 获取异常的信息
		toString(): 返回的是异常的类名和异常信息
		printStackTrace(): 在控制台中打印异常的类名,信息和异常的位置

	6.throws处理异常的方式:
		当在调用一个有抛出异常的方法时,可以把这个异常向上抛出, 在方法上用 throws异常类名 就可以把异常
		抛出.
	
	7.throw和throws的区别:	
		throw使用在方法中, 用于抛出异常对象,一次只能抛出一个对象
		throws用在方法声明上,用于抛出异常类,一次可以抛出多个类,用逗号隔开!

	8.finally关键字:
		finally关键字修饰是代码块,这个代码块必须要与异常处理代码块一起使用,不能单独使用!
		被finally修饰的代码块一定会执行,除非在执行前,虚拟机退出了!

		作用:
			用于关闭资源.

	9.面试题:
		1.final finally finalize 三个的区别:
			final 用于修饰
				类: 不可以被继承
				方法:不可以被重写
				变量: 是一个常量, 只能赋值一次

			finally是修饰代码块,与try catch 代码一起用, 一定会执行
				作用是释放资源

			finalize: 是Object中一个方法 

		
		2.finally和return谁先执行:
			return 先建立返回路径, 然后执行finally中的代码, return 语句再彻底返回结果
			finally中的内容是无法改变return中的结果的!
			finally中不要写return语句!
	
	
	10.自定义异常:
		1.步骤:
			1.定义一个类,让它继承Exception或者RuntimeException
			2.定义有参和空参构造方法

		2.作用:
			可以通过类名区分发生异常的原因!可以有针对性的处理方式!

	11.注意事项:
		子类在重写父类方法时,只能抛出跟父类相同的异常或者子类异常,父类的方法没有抛出异常时,子类重写该方法时也不能抛异常!

	12.什么时候使用try catch 什么时候抛!
		1.如果异常发生了,还想让程序继续运行,就try catch
		2.如果异常发生时,不需要继续运行了,就throw

	

2.File类
	1.File代表的路径:
		当构造方法中传入的是文件路径时,它可以操作文件
		当传入的是文件夹路径时,它可以操作的是文件夹!

	2.构造方法:	
		File(String): 传入的是一个文件或者文件夹的路径
		File(String parent,String child): 根据两个路径拼接成的路径创建的对象
		File(File parent,String child): 两个路径拼接成一个路径

	3.路径:
		相对路径: 没有盘符的路径
		绝对路径: 有盘符的路径

	4.创建方法:	
		createNewFile(): 创建文件
		mkdir(): 创建单级文件夹
		mkdirs(): 创建多级文件夹

	5.重命名:
		renameTo(File dest): 如果两个对象是在同一个路径下的,就是改名
			如果两个对象不是在同一个路径下, 就是改名并剪切!

	6.删除:
		delete():删除文件或者文件夹, 如果是删除文件夹,文件夹必须是空的!

	7.判断功能:
		isFile(): 判断是否是文件
		isDirectory(): 判断是否是文件夹
		exists(): 判断路径是否存在

		//以下方法为了解的
		canRead(): 判断是否可读
		canWrite(): 判断是否可写
		isHidden(): 判断是否隐藏

	8.获取功能:
		getAbsolutePath(): 获取绝对路径
		getPath(): 获取构造方法中的路径
		lastModified(): 获取文件最后修改时间的毫秒值

		getName(): 获取文件或者文件夹的名字
		length(): 获取文件的大小(这个方法不能获取文件夹的大小)
		list(): 返回的是文件夹中的所有文件或者文件夹的名字,是一个字符串数组
		listFiles(): 返回文件夹中的所有的文件或者文件夹的对象的数组, 得到的是File数组

	9.文件名过滤器:	
		FilenameFilter(接口)
			|--accpt()

		
