1.流程控制语句:循环语句
	1.分类:
		1.for循环
		2.while循环
		3.do...while循环(了解)

	2.for循环:
		格式:
			for(①初始化表达式;②条件表达式;④循环后的操作表达式){
				③循环体;
			}

			注意事项:
				1.初始化表达式只执行一次!
				2.条件表达式结果必须是boolean类型
				3.在循环中定义的变量,只在循环中有效!

	3.while循环:
		格式:
			初始化表达式;
			while(条件表达式){
				循环体;
				循环后的操作表达式;
			}

	4.do...while循环:
		格式:
			初始化表达式;
			do{
				循环体;
				循环后的操作表达式;
			}while(条件表达式);

	5.三种循环的区别:
		do...while循环至少会执行一次循环体.其他两个循环都是先判断条件,再决定是否执行循环体,可能会一次都不执行!

		for循环中的初始化表达式中定义的变量,只在循环中有效,循环结束后就会被释放掉
		while循环中初始化表达式中定义的变量,一直有效,可以在循环结束后继续使用!

	6.死循环(无限循环):
		for(;;){...}

		while(true){...}


	7.转义字符:
		\t: 制表符
		\r: 回车
		\n: 换行

	8.控制跳转的语句:
		break:
			①它可以使用在switch语句和循环语句中.
			②作用是结束当前循环.

		continue:
			只能用在循环中
			作用是终止本次循环,继续下次的循环

		return:
			① 返回方法运行的结果
			② 结束方法.

	9.标号:(了解)
		可以在内层循环控制外层循环结束.
		

2.方法(函数)
	1.为什么要有方法?
		方法的作用是提高代码的复用性!
	
	2.方法定义的格式:
		修饰符 返回值类型 方法名(数据类型 变量名1,数据类型 变量名2){
			方法体;
			return 结果;
		}

		public static int add(int a,int b){
			int sum = a+b;//方法体
			return sum;
		}

		形式参数:定义方法时在方法上声明的变量
		实际参数:调用该方法时传入的数据

	3.注意事项:
		1.方法的调用:	
			①有返回值的方法
				单独调用(没有意义): add(10,20);
				输出调用: System.out.println(add(10,20));
				赋值调用: int x = add(10,20);

			②没有返回值的方法
				只能单独调用!

		2.其他注意事项:
			①方法与方法之间是平级关系,不能嵌套
			②方法没有调用不会执行
			③参数与参数之间用逗号隔开
			④调用方法时,传入参数不需要写类型
			⑤如果方法有写明确的返回值类型,必须由return带回结果

		3.方法的定义:
			①明确返回值类型
			②明确参数列表
			


		4.方法重载:
			前提:在同一个类中!
			方法名相同,参数列表不同,与返回值类型无关!


