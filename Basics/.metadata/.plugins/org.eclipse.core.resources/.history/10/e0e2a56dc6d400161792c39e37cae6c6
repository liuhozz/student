1.Map集合
	存储的是键和值(key和value)

	Collection 存储的是单例的
	Map存储的是双列的

	HashSet底层是HashMap实现的
	TreeSet底层是TreeMap实现的

	1.Map集合的常用方法:	
		1.添加:
			put(key,value): 存储一对键值对,返回的是被覆盖的值
		
		2.删除:
			remove(key): 根据键删除元素,返回对应的值

		3.判断功能:
			containsKey(key): 判断是否包含指定的键
			containsValue(value): 判断是否包含指定的值
			isEmpty(): 判断集合是否为空
			keySet()
			entrySet()
			get(key): 根据键获取值
		
		4.获取功能:
			values(): 把Map集合中的所有的值存储到一个Collection集合中并返回!
			size(): 获取集合中的元素个数

	2.Map集合的遍历方式:
		1.通过键查找值:
			1.通过迭代器实现
				keySet()得到键的集合
				遍布这个集合,得到每一个key
				再通过get(key),得到每一个value

			2.通过增强for实现

		2.通过键值对对象获取键和值
			1.通过entrySet方法获取键值对对象的Set集合
			2.遍历这个集合,得到每一个键值对对象(Entry)
			3.通过键值对对象的getKey()得到键,getValue()得到值

	
	
	




	
2.Map集合的两个子类
	1.HashMap集合的键必须要重写hashCode方法和equals方法,才能保证键的唯一性, 值不需要保证唯一性!

	2.Map集合的所有特点都是针对键的,与值无关!

	3.LinkedHashMap:
		可以保证存取顺序一致

	4.TreeMap:
		可以对集合中的键进行排序.
		键必须要实现Comparable接口
		或者传入比较器对象,比较器对象比较的键!

	5.HashMap 和 Hashtable 的区别:
		1.是否线程安全
			Hashtable是线程安全的,效率低! JDK1.0的时候出现的
			HashMap是线程不安全的,效率高! JDK1.2出现的

		2.是否可以存储null键和null值
			HashMap可以存储null键和null值
			Hashtable不可以存储null键和null值


3.Collections类
	1.常用方法:	
		sort(List): 对集合中的元素进行排序
		binarySearch(List): 二分查找 
		max(Collection): 获取集合中的最大值
		reverse(List): 反转集合中的元素
		shuffle(List): 随机置换集合中的元素

		sort方法和max方法中的集合参数中的元素必须要实现Comparable接口!

	2.